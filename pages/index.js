import React, { useEffect } from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import {
  Container,
  Stepper,
  Step,
  StepLabel,
  Box,
  Button,
} from "@mui/material";
import { makeStyles } from "@mui/styles";
import { useFormik } from "formik";
import { toast } from "react-toastify";
import BasicInfo from "../components/BasicInfo";
import About from "../components/About";
import Profile from "../components/Profile";
import * as yup from "yup";

import httpClient from "../utils/httpClient";

const steps = ["Basic Info", "About", "Preview"];

const useStyles = makeStyles({
  body: {
    "& > *:not(:last-child)": {
      marginBottom: "16px",
    },
  },
});

export default function Home({ id, data }) {
  const classes = useStyles();

  const router = useRouter();

  const formik = useFormik({
    initialValues: {
      id: undefined,
      step: 0,
      name: "",
      dateOfBirth: new Date(),
      location: "",
      team: "",
      gender: "",
      sports: [],
      description: "",
      interests: "",
      profileImage: "",
    },
    validationSchema: yup.object().shape({
      name: yup.string().when("step", {
        is: 0,
        then: yup.string().required("Name is required"),
      }),
      dateOfBirth: yup.string().when("step", {
        is: 0,
        then: yup.string().required("Date Of Birth is required"),
      }),
      gender: yup.string().when("step", {
        is: 0,
        then: yup.string().required("Gender is required"),
      }),
      sports: yup.array().when("step", {
        is: 0,
        then: yup.array().required("Sports is required"),
      }),
      description: yup.string().when("step", {
        is: 1,
        then: yup.string().required("Description is required"),
      }),
      location: yup.string().when("step", {
        is: 1,
        then: yup.string().required("Location is required"),
      }),
      team: yup.string().when("step", {
        is: 1,
        then: yup.string().required("Team is required"),
      }),
      interests: yup.string().when("step", {
        is: 1,
        then: yup.string().required("Interests is required"),
      }),
    }),
    onSubmit: async (values) => {
      formik.setFieldValue("step", formik.values.step + 1);
      if (!id) {
        httpClient
          .post(`/api/profile`, values)
          .then((profile) => {
            formik.setFieldValue("id", id);
            router.push(`/?id=${profile.data._id}`);
          })
          .catch((e) => {
            console.error(e);
          });
        return;
      }
      await httpClient
        .put(`/api/profile?id=${id}`, values)
        .then(() => {})
        .catch((e) => {
          console.error(e);
        });
    },
  });

  const validateForm = async () => {
    const errors = await formik.validateForm();

    if (Object.keys(errors).length !== 0) {
      toast.error("All field is required");
      return;
    }
    return true;
  };

  useEffect(() => {
    if (data) {
      formik.setFieldValue("id", data._id);
      formik.setFieldValue("name", data.name);
      formik.setFieldValue("dateOfBirth", data.dateOfBirth);
      formik.setFieldValue("location", data.location);
      formik.setFieldValue("team", data.team);
      formik.setFieldValue("gender", data.gender);
      formik.setFieldValue("sports", data.sports);
      formik.setFieldValue("description", data.description);
      formik.setFieldValue("interests", data.interests);
    }
  }, [data]);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Box my={5}>
        <Container maxWidth="sm">
          <>
            <Stepper activeStep={formik.values.step} alternativeLabel>
              {steps.map((label) => (
                <Step key={label}>
                  <StepLabel>{label}</StepLabel>
                </Step>
              ))}
            </Stepper>
            <Box my={3} className={classes.body}>
              {formik.values.step === 0 && <BasicInfo formik={formik} />}
              {formik.values.step === 1 && <About formik={formik} />}
              {formik.values.step === 2 && (
                <Profile
                  formik={formik}
                  name={formik.values.name}
                  sports={formik.values.sports}
                  gender={formik.values.gender}
                  dateOfBirth={formik.values.dateOfBirth}
                  description={formik.values.description}
                  location={formik.values.location}
                  team={formik.values.team}
                  interests={formik.values.interests}
                />
              )}
              <Box display="flex" justifyContent="space-between">
                {formik.values.step !== 0 ? (
                  <Button
                    variant="contained"
                    color="primary"
                    onClick={() => {
                      formik.setFieldValue("step", formik.values.step - 1);
                    }}
                  >
                    Previous
                  </Button>
                ) : (
                  <div />
                )}
                {formik.values.step !== 2 && (
                  <Button
                    variant="contained"
                    color="primary"
                    onClick={() => {
                      if (validateForm()) {
                        formik.handleSubmit();
                      }
                    }}
                  >
                    Next
                  </Button>
                )}
                {formik.values.step === 2 && (
                  <Button
                    variant="contained"
                    color="primary"
                    onClick={() => {
                      router.push(`/preview/${formik.values.id}`);
                    }}
                  >
                    Submit
                  </Button>
                )}
              </Box>
            </Box>
          </>
        </Container>
      </Box>
    </>
  );
}

export async function getServerSideProps(context) {
  if (context.query.id) {
    const response = await httpClient.get(
      `/api/profile?id=${context.query.id}`
    );
    return {
      props: { id: context.query.id || null, data: response.data || null },
    };
  }
  return {
    props: {
      id: null,
      data: null,
    },
  };
}
